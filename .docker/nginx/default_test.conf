upstream upstream-default {
    server php-fpm:9000;
}

# erc.localhost
server {
    #listen 80 default_server backlog=8192;
    #listen [::]:80 default_server backlog=8192;
    # server_name _;

    listen 80;
    server_name test.erc.localhost www.test.erc.localhost test.erc.ua www.test.erc.ua;
    server_name test.erc-distribution.ge www.test.erc-distribution.ge;
    root /var/www/html/VidoErcApp/web;

    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /app_dev.php$is_args$args;
    }

    location ~ ^/(upload)/(.*)$ {
        if (!-f $request_filename) {
            return 301 https://erc.ua/$1/$2;
        }

        expires 30d;
        access_log off;
    }

    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    location ~ ^/(app_dev|config)\.php(/|$) {
        fastcgi_buffer_size 128k;
        fastcgi_buffers 8 256k;
        fastcgi_pass upstream-default;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        fastcgi_read_timeout 300;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    access_log /dev/stdout;
    error_log /dev/stderr info;
}

# api.erc.localhost
server {
    listen 80;
    server_name test.api.erc.localhost www.test.api.erc.localhost test.api.erc.ua www.test.api.erc.ua;
    server_name test.api.erc-distribution.ge www.test.api.erc-distribution.ge;
    root /var/www/html/ErcApiApp/web;

    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /app_dev.php$is_args$args;
    }

    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    location ~ ^/(app_dev|config)\.php(/|$) {
        fastcgi_pass upstream-default;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    access_log /dev/stdout;
    error_log /dev/stderr info;
}

# backend.erc.localhost
server {
    listen 80;
    server_name test.backend.erc.localhost www.test.backend.erc.localhost test.backend.erc.ua www.test.backend.erc.ua;
    server_name test.backend.erc-distribution.ge www.test.backend.erc-distribution.ge;
    root /var/www/html/VidoAdminApp/web;

    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /app_dev.php$is_args$args;
    }

    location ~ ^/(upload)/(.*)$ {
        if (!-f $request_filename) {
            return 301 https://erc.ua/$1/$2;
        }

        expires 30d;
        access_log off;
    }

    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    location ~ ^/(app_dev|config)\.php(/|$) {
        fastcgi_pass upstream-default;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    access_log /dev/stdout;
    error_log /dev/stderr info;
}

server {
    listen 80;
    server_name test.vido.localhost www.test.vido.localhost test.vido.com.ua www.test.vido.com.ua;
    server_name test.vido.erc-distribution.ge www.test.vido.erc-distribution.ge;
    root /var/www/html/VidoNewsApp/web;

    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /app_dev.php$is_args$args;
    }

    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    location ~ ^/(app_dev|config)\.php(/|$) {
        fastcgi_pass upstream-default;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    location ~ ^/(upload|media)/(.*)$ {
        return 301 https://erc.ua/$1/$2;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    access_log /dev/stdout;
    error_log /dev/stderr info;
}

# pricelab.erc.dev
server {
    listen 80;
    server_name test.pricelab.erc.localhost www.test.pricelab.erc.localhost test.pricelab.erc.ua www.test.pricelab.erc.ua;
    server_name test.pricelab.erc-distribution.ge www.test.pricelab.erc-distribution.ge;
    root /var/www/html/VidoPriceLabApp/web;

    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /app_dev.php$is_args$args;
    }
    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    location ~ ^/(app_dev|config)\.php(/|$) {
        fastcgi_pass upstream-default;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    location ~ ^/(upload|media)/(.*)$ {
        return 301 https://erc.ua/$1/$2;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    access_log /dev/stdout;
    error_log /dev/stderr info;
}